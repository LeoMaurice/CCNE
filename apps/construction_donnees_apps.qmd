```{r}
# Charger les bibliothèques nécessaires
require(pacman,quietly = T)

pacman::p_load(arrow,
               tidyverse,
               reshape2,
               stringr,
               igraph,
               tidygraph,
               openxlsx)

source("../src/helpers/database_creation.R")
source("../src/helpers/figures.R")
```

# Réseau


```{r}
designation_recoding <- Vectorize(function(type, Auteur_Institution, Institution_Domaine, freq_auteur, freq) {
if (type == "classic") {
  return(Auteur_Institution)
} else {
  return(Institution_Domaine)
}
})


metadata_avis <- open_metadata()

metadata_citation <- read.xlsx("../data/raw/collected_metadata/metadata_citation.xlsx", 
                               colNames = TRUE,
                               cols = c(1, 2, 4, 5, 6))%>%
  separate_rows(cité_dans_avis_num, sep = ";")%>%
  separate_rows(Institution_Domaine, sep = ";")%>%
  group_by(Auteur_Institution)%>%
  mutate(freq_auteur = n())%>%
  ungroup()%>%
  group_by(Institution_Domaine)%>%
  mutate(freq_institution = n())%>%
  ungroup()%>%
  mutate(type = ifelse(is.na(type),"",type),
         type = ifelse(type %in% c("livre","article","colloque","thèse"),"académique",type),
         Désignation = designation_recoding(type,Auteur_Institution, Institution_Domaine, freq_auteur,freq_institution)
         )

recat <- read_excel("../data/intermediate/reseau/recategorize_designation.xlsx")

metadata_citation <- metadata_citation%>%
  left_join(recat, by = "Désignation")%>%
  rename(Désignation_collectée = Désignation,
         Désignation = Désignation_ego)

# Création des dataframes nécessaires
reseau_citation_extra <- metadata_citation %>%
  rename(Avis = cité_dans_avis_num) %>%
  group_by(Avis, Désignation, Groupe) %>%
  summarise(Citations = n()) %>%
  rename(from = Avis,
         to = Désignation,
         Categorie = Groupe) %>%
  mutate(shape = "Extra citation")

reseau_citation_intra <- metadata_avis %>%
  filter(!(is.na(citations_autres_avis))) %>%
  separate_rows(citations_autres_avis, sep = ";") %>%
  rename(from = num,
         to = citations_autres_avis) %>%
  group_by(from, to) %>%
  summarise(Citations = n()) %>%
  mutate(shape = "Intra citation",
         Categorie = "CCNE",
         from = as.character(from))

micrograph_edgelist_df <- bind_rows(reseau_citation_extra, reseau_citation_intra) %>%
  filter(!(to == "covid"))  # supprimer les avis covid pour l'instant

micrograph_nodes_df <- bind_rows(
  metadata_citation %>%
    rename(name = Désignation, Categorie = Groupe) %>%
    mutate(shape = "Extra citation") %>%
    select(name, Categorie, shape) %>%
    distinct(),
  metadata_avis %>%
    mutate(name = as.character(num),
           shape = "Intra citation",
           Categorie = "CCNE") %>%
    select(name, Categorie, shape) %>%
    distinct()
) %>%
  filter(!(is.na(name)))

# Création de l'objet tbl_graph
microreseau_citation <- tbl_graph(edges = micrograph_edgelist_df %>% 
                               select(from, to, Citations, Categorie, shape),
                             nodes = micrograph_nodes_df %>%
                               select(name, Categorie, shape),
                             directed = TRUE, node_key = "name") %>%
  activate(nodes) 
  #filter(degree(.) > 0) on supprime les avis sans aucune citation ni intra ni extra mais pas dans le réseau micro : juste dans le méso.

# Convertir l'objet tbl_graph en igraph
microreseau_citation_igraph <- as.igraph(microreseau_citation)
```

```{r}
designation_recoding <- Vectorize(function(type, Auteur_Institution, Institution_Domaine, freq_auteur, freq) {
if (type == "classic") {
  return(Auteur_Institution)
} else {
  return(Institution_Domaine)
}
})


metadata_avis <- open_metadata()

metadata_citation <- read.xlsx("../data/raw/collected_metadata/metadata_citation.xlsx", 
                               colNames = TRUE,
                               cols = c(1, 2, 4, 5, 6))%>%
  separate_rows(cité_dans_avis_num, sep = ";")%>%
  separate_rows(Institution_Domaine, sep = ";")%>%
  group_by(Auteur_Institution)%>%
  mutate(freq_auteur = n())%>%
  ungroup()%>%
  group_by(Institution_Domaine)%>%
  mutate(freq_institution = n())%>%
  ungroup()%>%
  mutate(type = ifelse(is.na(type),"",type),
         type = ifelse(type %in% c("livre","article","colloque","thèse"),"académique",type),
         Désignation = designation_recoding(type,Auteur_Institution, Institution_Domaine, freq_auteur,freq_institution)
         )

recat <- read_excel("../data/intermediate/reseau/recategorize_designation.xlsx")

metadata_citation <- metadata_citation%>%
  left_join(recat, by = "Désignation")%>%
  rename(Désignation_collectée = Désignation,
         Désignation = Désignation_méso)

# Création des dataframes nécessaires
reseau_citation_extra <- metadata_citation %>%
  rename(Avis = cité_dans_avis_num) %>%
  group_by(Avis, Désignation, Groupe) %>%
  summarise(Citations = n()) %>%
  rename(from = Avis,
         to = Désignation,
         Categorie = Groupe) %>%
  mutate(shape = "Extra citation")

reseau_citation_intra <- metadata_avis %>%
  filter(!(is.na(citations_autres_avis))) %>%
  separate_rows(citations_autres_avis, sep = ";") %>%
  rename(from = num,
         to = citations_autres_avis) %>%
  group_by(from, to) %>%
  summarise(Citations = n()) %>%
  mutate(shape = "Intra citation",
         Categorie = "CCNE",
         from = as.character(from))

mesograph_edgelist_df <- bind_rows(reseau_citation_extra, reseau_citation_intra) %>%
  filter(!(to == "covid"))  # supprimer les avis covid pour l'instant

mesograph_nodes_df <- bind_rows(
  metadata_citation %>%
    rename(name = Désignation, Categorie = Groupe) %>%
    mutate(shape = "Extra citation") %>%
    select(name, Categorie, shape) %>%
    distinct(),
  metadata_avis %>%
    mutate(name = as.character(num),
           shape = "Intra citation",
           Categorie = "CCNE") %>%
    select(name, Categorie, shape) %>%
    distinct()
) %>%
  filter(!(is.na(name)))

# Création de l'objet tbl_graph
mesoreseau_citation <- tbl_graph(edges = mesograph_edgelist_df %>% 
                               select(from, to, Citations, Categorie, shape),
                             nodes = mesograph_nodes_df %>%
                               select(name, Categorie, shape),
                             directed = TRUE, node_key = "name") %>%
  activate(nodes)
  # filter(degree(.) > 0)

# Convertir l'objet tbl_graph en igraph
mesoreseau_citation_igraph <- as.igraph(mesoreseau_citation)

# mesoreseau_citation_igraph = delete.vertices(mesoreseau_citation_igraph, which(degree(mesoreseau_citation_igraph)==0))
```

```{r}
base_avis <- arrow::read_feather('../data/intermediate/big/base_avis.feather')
base_avis%>%
group_by(president)%>%
summarise(avis_max = max(num), avis_min = min(num)) -> max_min_par_president
```



```{r}
save(microreseau_citation_igraph, micrograph_nodes_df, micrograph_edgelist_df, 
     mesoreseau_citation_igraph, mesograph_nodes_df, mesograph_edgelist_df,
     max_min_par_president,
     file = "./ego_citations_by_avis/network_data.RData")

save(microreseau_citation_igraph, micrograph_nodes_df, micrograph_edgelist_df, 
     mesoreseau_citation_igraph, mesograph_nodes_df, mesograph_edgelist_df,
     max_min_par_president,
     file = "./Mesonetwork/network_data.RData")

save(microreseau_citation_igraph, micrograph_nodes_df, micrograph_edgelist_df, 
     mesoreseau_citation_igraph, mesograph_nodes_df, mesograph_edgelist_df,
     max_min_par_president,
     file = "./top_citations/network_data.RData")
```

# Liste avis
```{r}
base_avis <- arrow::read_feather('../data/intermediate/big/base_avis.feather')
base_avis <- as.data.frame(base_avis)
base_avis%>%
  select(num,Titre,president,Date,theme,nb_pages,rapporteurs,membres_gt)%>%
  rename("Numéro avis"=num,
         "Titre"=Titre,
         "Président" = president,
         "Thème"=theme,
         "Nombre de pages" = nb_pages,
         "Rapporteurs" = rapporteurs,
         "Membres du Groupe de Travail" = membres_gt
         )->base_avis

base_avis%>%
  mutate(Date = format(as.Date(Date, format = "%Y-%m-%d"), "%d/%m/%Y"),
         Thème = as.character(Thème),
         Titre = as.character(Titre),
         Président = as.character(Président),
         Rapporteurs = as.character(Rapporteurs),
         `Membres du Groupe de Travail` = as.character(`Membres du Groupe de Travail`))->base_avis
saveRDS(base_avis, "./Liste_avis/base_avis.rds")
```



# PCA

```{r}
library(FactoMineR)
# Calculer le nombre de citations pour chaque source
citations_summary <- mesograph_edgelist_df %>%
  filter(Categorie!="CCNE")%>%
  group_by(from, to) %>%
  summarise(total_citations = sum(Citations)) %>%
  ungroup()

# Réorganiser le tableau pour avoir les colonnes "num" et le nombre de citations pour chaque document
citations_table <- citations_summary %>%
  pivot_wider(names_from = to, values_from = total_citations, values_fill = list(total_citations = 0)) %>%
  rename(num = from)%>%
  column_to_rownames(., var = 'num')

saveRDS(citations_table,"./PCA/citations_table.rds")

#Factoshiny::PCAshiny(citations_table)
```

