---
title: "CCNE Personne across avis"
author: "Léopold MAURICE"
date: "2024-06-05"
project: CCNE
supervision: Pr. Emmanuel Didier, CMH/ENS/EHESS
format:
  html:
    toc: true
    number-sections: true
    colorlinks: true
    geometry:
      - top=10mm
      - left=20mm
      - right=20mm
      - bottom=10mm  
      - heightrounded
    highlight-style: github
    fontfamily: libertinus
    documentclass: report
    fig-width: 12
    fig-height: 9
  pdf:
    documentclass: article
    geometry: [left=1in, right=1in, top=1in, bottom=1in]
    fontsize: 11pt
    keep-tex: true
    toc: true
    toc-depth: 2
    number-sections: true
execute:
  eval: true
  message: false
  warning: false
  echo: false
  output: true
  error: true
editor: source
---

```{r}
require(pacman,quietly = T)

pacman::p_load(arrow,
               tidyverse,
               reshape2,
               stringr,

               stats,
               rstatix,
               
               ggplot2,
               gridExtra,
               ggprism,
               ggpubr,
               ggcorrplot,
               ggalluvial,
               ComplexHeatmap,
               circlize,
               patchwork,
               rmarkdown,
               quarto,
               readxl,
               readr)

source("helpers/database_creation.R")
source("helpers/figures.R")

save_figures = T
cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, 1)
symbols = c("****", "***", "**", "*", "•","ns")
significance = c("p < 0.0001", "p < 0.001", "p < 0.01", "p < 0.05", "p < 0.1", "p>0.1")
signif_caption_text <- paste("Significance levels:\n", paste(symbols, ":", significance, collapse = ", "))

```
```{r}
predictions_BERT <- read_csv("../data/intermediate/predictions/predictions_camemBERT_1400annotations_5classes_2024-06-04.csv", 
    col_types = cols(sentence_id = col_integer(), 
        pred_label = col_integer())) %>%
  mutate(
    sentence_index = as.numeric(substr(sentence_id, nchar(as.character(sentence_id)) - 3, nchar(as.character(sentence_id)))),
    num = as.numeric(substr(sentence_id, 1, nchar(as.character(sentence_id)) - 4))
  )

recat <- c("Corps humain" = "Corps humain",
           "Genre/espèce humaine" = "Genre/espèce humaine",
           "Individu ou sujet" = "Individu ou sujet",
           "Personne à protéger" = "Personne droits et devoirs",
           "Personne responsable et autonome" = "Personne droits et devoirs",
           "Personne relationnelle" = "Personne relationnelle",
           "Sentiment humain" = "Genre/espèce humaine",
           "Poubelle" = "Poubelle")

annotations <- read_csv("../data/intermediate/annotations/personne_withSentence_1400annotations_2024-06-03_ActiveTigger.csv")%>%
  rename(annotation_label = Personne)%>%
  mutate(training_label = recode(annotation_label, !!!recat))%>%
  select(sentence_id,training_label,annotation_label)

# base avec métadonnées au niveau des avis, sans découper au niveau des phrases
base_avis <- arrow::read_feather('../data/intermediate/big/base_avis.feather')
levels_order <- c( "Bernard (83-91)", "Changeux (92-99)","Sicard (00-08)", "Grimfeld (09-11)", "Ameisen (12-15)", "Delfraissy (16-)")

base_avis$president <- factor(base_avis$president, levels = levels_order)

predictions <- predictions_BERT %>%
  left_join(annotations, by = "sentence_id")%>%
  mutate(label = ifelse(!is.na(training_label), training_label, pred_Personne))%>%
  filter(label != "Poubelle")%>%
  left_join(base_avis, by = "num")%>%
  mutate(label = factor(label, levels = c("Personne relationnelle","Individu ou sujet","Genre/espèce humaine",
                                         "Corps humain","Personne droits et devoirs")),
         Date = as.Date(Date))
```
# Classifications across time

## Presidents
```{r}
#| fig-width: 12
#| fig-height: 10
predictions %>%
  group_by(president, label) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(president) %>%
  mutate(total = sum(count), percentage = 100 * count / total) %>%
  ungroup() %>%
  select(-total)%>%
  ggbarplot(x='president',fill = 'label', y = 'percentage',
            position = position_stack(), 
            #label = TRUE,lab.nb.digits = 2,lab.pos = "in",
            ylab = "% des phrases", xlab = "Président",
            title = "Pourcentage des phrases\nselon leur labelisationn\net selon le président au moment de la publication de l'avis")+
  theme_ready()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))+
  scale_fill_prism(palette = "floral")+
  labs(fill = "Label")+
  guides(fill = guide_legend(title.position = "top"))
```
## Quarters
```{r, fig.width=20, fig.height=15}
#| fig-width: 12
#| fig-height: 10

# Convert Date to quarter
predictions <- predictions %>%
  mutate(quarter = paste0(year(Date), "-Q", quarter(Date)))

# Get all unique labels
all_labels <- unique(predictions$label)

# Get all unique quarters
all_quarters <- predictions %>%
  mutate(quarter = paste0(year(Date), "-Q", quarter(Date))) %>%
  arrange(Date) %>%
  distinct(quarter) %>%
  pull(quarter)
# Create a numeric sequence for quarters
quarter_numeric <- 1:length(all_quarters)

# Map quarters to numeric sequence
quarter_map <- data.frame(quarter = all_quarters, quarter_num = quarter_numeric)

# Complete missing values with 0 and compute percentages
temp <- predictions %>%
  mutate(quarter = factor(quarter, levels = all_quarters)) %>%
  group_by(quarter, label) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(quarter) %>%
  mutate(percentage = 100 * count / sum(count)) %>%
  ungroup() %>%
  complete(quarter = all_quarters, label = all_labels, fill = list(percentage = 0)) %>%
  left_join(quarter_map, by = "quarter")

# Graphique en aires empilées
ggplot(temp, aes(x = quarter_num, y = percentage, fill = label)) +
  geom_area(position = "stack", alpha = 0.8) +
  theme_ready() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  scale_fill_prism(palette = "floral") +
  scale_color_prism(palette = "floral") +
  scale_x_continuous(breaks = quarter_numeric, labels = all_quarters) +
  labs(fill = "Label", color = "Label",
       title = "Proportion des catégories au fil du temps", x = "Trimestre", y = "Pourcentage") +
  guides(fill = guide_legend(title.position = "top"))


```

## Year
```{r, fig.width=20, fig.height=10}
# Convert Date to year
predictions <- predictions %>%
  mutate(year = year(Date))

# Get all unique labels
all_labels <- unique(predictions$label)

# Get all unique years and order them chronologically
all_years <- sort(unique(predictions$year))

# Complete missing values with 0 and compute percentages
temp <- predictions %>%
  group_by(year, label) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(year) %>%
  mutate(percentage = 100 * count / sum(count)) %>%
  ungroup() %>%
  complete(year = all_years, label = all_labels, fill = list(percentage = 0))

# Graphique en aires empilées
ggplot(temp, aes(x = year, y = percentage, fill = label)) +
  geom_area(position = "stack", alpha = 0.8) +
  geom_line(position = "stack", color = "black", linetype = "dashed", size =1)+
  theme_ready() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  scale_fill_prism(palette = "floral") +
  scale_x_continuous(breaks = all_years) +
  labs(fill = "Label", color = "Label",
       title = "Proportion des catégories au fil du temps", x = "Année", y = "Pourcentage") +
  guides(fill = guide_legend(title.position = "top"))
```

# Classification compared to rapporteur by avis
need to run descriptive figures membres avant

## bar plot
```{r, fig.width=40, fig.height=30}
# Exploser la colonne avis_rapporteur pour avoir une ligne par personne et par avis
metadata_avis_membre <- metadata_auteur_2002 %>%
  unnest(avis_rapporteur)

# Combiner les trois opérations en une seule
percentage_participation <- metadata_avis_membre %>%
  group_by(avis_rapporteur) %>%
  mutate(total_count = n()) %>%
  group_by(avis_rapporteur, profession_recodée, id_membre) %>%
  summarise(
    profession_count = n(),
    total_count = first(total_count)
  ) %>%
  mutate(percentage = 100 * profession_count / total_count) %>%
  select(avis_rapporteur, profession_recodée,id_membre, percentage) %>%
  rename(num = avis_rapporteur)

num_with_rapporteur_info <- unique(percentage_participation$num)

percentage_categorie <- predictions %>%
  filter(num %in% num_with_rapporteur_info) %>%
  group_by(num, label) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(num) %>%
  mutate(percentage = 100 * count / sum(count)) %>%
  ungroup()

# Ajouter les annotations pour les dates sous les graphiques
metadata_avis_2002 <- metadata_avis %>%
  filter(num %in% num_with_rapporteur_info) %>%
  mutate(date_labels = format(date, "%Y/%m/%d")) %>%
  mutate(labels = paste(date_labels, num)) %>%
  arrange(num)

plot_theme_titre_par_avis <- ggplot(metadata_avis_2002, aes(x = factor(num), y = 0)) +
  geom_text(aes(label = paste(num,titre_court, theme, sep = " | ")), angle = 90, vjust = -0.5, check_overlap = TRUE, size = 10) +
  theme_void() +
  theme(
    plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
  )

# Graphique en barres empilées
plot_categorie_par_avis <- ggplot(percentage_categorie, aes(x = factor(num), y = percentage, fill = label)) +
  geom_bar(stat = "identity", position = "stack", alpha = 0.8) +
  theme_ready(text_size = 35) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  scale_fill_prism(palette = "floral") +
  labs(fill = "Label", color = "Label",
       title = "Proportion des catégories au fil du temps par avis", x = "Numéro avis", y = "Pourcentage") +
  guides(fill = guide_legend(title.position = "top"))

# Graphique en barres empilées
plot_participation_par_avis <- ggplot(percentage_participation, aes(x = factor(num), y = percentage, fill = profession_recodée)) +
  geom_bar(stat = "identity", position = "stack", alpha = 1, color = "black") +
  theme_ready(text_size = 35) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  scale_fill_prism(palette = "floral") +
  labs(fill = "Profession", color = "Profession",
       title = "Proportion des professions au fil du temps par avis", x = "Numéro avis et date de publication", y = "Pourcentage") +
  guides(fill = guide_legend(title.position = "top")) +
  scale_x_discrete(labels = metadata_avis_2002$labels)+
  labs(caption = "Graphique de l'auteur.\nDonnées collectées par l'auteur.\nLecture : Par exemple, l'avis 86 (publié le 04/11/2004) - qui parle de la commercialisation des autotests, dans le thème maladies génétique - a été à 100% écrit par un PUPH et réfère à 50% à la personne en tant qu'entité juridique.")

# Utiliser grid.arrange pour arranger les graphiques
participation_categories_across_avis <- grid.arrange(
  plot_theme_titre_par_avis,
  plot_categorie_par_avis,
  plot_participation_par_avis,
  ncol = 1,
  heights = c(10, 7, 7)  # Ajuster la hauteur relative pour donner plus d'espace aux textes
)
```
## Alluvial plot

```{r, fig.width=40, fig.height=30}
metadata_avis_membre %>%
  rename(num = avis_rapporteur) %>%
  left_join(
    predictions %>%
  filter(num %in% num_with_rapporteur_info) %>%
  group_by(num, label) %>%
  summarise(nb_phrases = n(), .groups = 'drop'), by = "num"
  )%>%
  # on obtient là un df avec pour chaque personne, pour chaque avis, pour chaque catégorie textuelle
  ggplot(aes(axis1 = président_première_nomination, axis2 = label, y = nb_phrases))+
  geom_alluvium(aes(fill = profession_recodée),
                curve_type = "sine")+
  geom_stratum()+
  geom_text(stat = "stratum",
            aes(label = after_stat(stratum)),
            size = 30) +
  scale_x_discrete(limits = c("Président", "Catégorie phrase"),
                   expand = c(0.15, 0.05)) +
  theme_ready(text_size = 35)+
  scale_fill_prism(palette = "floral")+
  guides(fill = guide_legend(title.position = "top"))+
  labs(ylab = "Nombre de phrase", fill = "Profession recodée")



```


```{r, fig.width=30, fig.height=30}
metadata_avis_membre %>%
  rename(num = avis_rapporteur) %>%
  left_join(
    predictions %>%
  filter(num %in% num_with_rapporteur_info) %>%
  group_by(num, label) %>%
  summarise(nb_phrases = n(), .groups = 'drop'), by = "num"
  )%>%
  # on obtient là un df avec pour chaque personne, pour chaque avis, pour chaque catégorie textuelle
  ggplot(aes(axis1 = profession_recodée, axis2 = label, y = nb_phrases))+
  geom_alluvium(aes(fill = profession_recodée),
                curve_type = "sine")+
  geom_stratum()+
  geom_text(stat = "stratum",
            aes(label = after_stat(stratum)),
            size = 15) +
  scale_x_discrete(limits = c("Profession", "Catégorie phrase"),
                   expand = c(0.15, 0.05)) +
  theme_ready(text_size = 35)+
  scale_fill_prism(palette = "floral")+
  guides(fill = guide_legend(title.position = "top"))+
  labs(ylab = "Nombre de phrase", fill = "Profession recodée",
       caption= "Graphique de l'auteur.\nDonnées collectées par l'auteur.\nLecture: La majorité des phrases co-signées par les biologistes sont classées dans genre/espèce humaine.")



```

