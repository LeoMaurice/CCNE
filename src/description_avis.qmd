---
title: "Quelques informations sur les avis du CCNE"
author: "Léopold MAURICE, ENSAE"
date: "2024-02-29"
project: CCNE
supervision: Pr. Emmanuel Didier, CMH/ENS/EHESS
output-ext: html
format:
  html:
    toc: true
    number-sections: false
    colorlinks: true
    geometry:
      - top=10mm
      - left=20mm
      - right=20mm
      - bottom=10mm  
      - heightrounded
    highlight-style: github
    fontfamily: libertinus
    documentclass: report
    fig-width: 12
    fig-height: 9
execute:
  eval: true
  message: false
  warning: false
  echo: false
  output: true
  error: false
editor: source
---

```{r}
require(pacman,quietly = F)

pacman::p_load(arrow,
               tidyverse,
               reshape2,

               stats,
               rstatix,
               
               ggplot2,
               gridExtra,
               ggprism,
               ggpubr,
               ggcorrplot,
               ComplexHeatmap,
               circlize,
               patchwork)

source("helpers/df_to_matrix.R")
source("helpers/heatmap.R")
source("helpers/lexico_helper.R")
source("helpers/figures.R")
source("helpers/database_creation.R")


save_figures = F
cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, 1)
symbols = c("****", "***", "**", "*", "•","ns")
significance = c("p < 0.0001", "p < 0.001", "p < 0.01", "p < 0.05", "p < 0.1", "p>0.1")
signif_caption_text <- paste("Significance levels:\n", paste(symbols, ":", significance, collapse = ", "))

```

```{r}
# base au niveau de phrases
base_sentences <- arrow::read_feather('../data/intermediate/base_sentences.feather')
# base avec métadonnées au niveau des avis, sans découper au niveau des phrases
base_avis <- arrow::read_feather('../data/intermediate/base_avis.feather')
levels_order <- c( "Bernard (83-91)", "Changeux (92-99)","Sicard (00-08)", "Grimfeld (09-11)", "Ameisen (12-15)", "Delfraissy (16-)")

base_avis$president <- factor(base_avis$president, levels = levels_order)

base_sentences <- base_sentences%>%
  left_join(base_avis, by = "num")

```

```{r}
#| eval: false
#ggprism::preview_theme("colorblind_safe")
"#004080"
ggprism::prism_color_pal("office")(5)

```
# Taille des avis au cours du temps

```{r, fig.width=11, fig.height=4.9}
#| eval: true
# Create the first plot
nb_page_plot <- ggplot(base_avis, aes(x = Date, y = nb_pages)) +
  geom_point() +  
  geom_smooth(formula = 'y ~ x', method = "loess", se = FALSE, color = "#077E97") +  
  labs(title = "Nombre de pages par avis",
       x = "Date",
       y = "Nombre de pages")+
  theme_ready()

# Create the second plot
nb_mots_plot <- ggplot(base_avis, aes(x = Date, y = nb_mots)) +
  geom_point() +  
  geom_smooth(formula = 'y ~ x', method = "loess", se = FALSE, color = "#C000C0") +  
  labs(title = "Nombre de mots par avis",
       x = "Date",
       y = "Nombre de mots")+
  theme_ready()

# Arrange the plots
nb_page_plot + nb_mots_plot + plot_layout(ncol = 2)

if(save_figures)
  ggsave("../output/descriptive_figures/taille_avis_temps.png")
```
# Nombre d'avis
## Selon le thème 
```{r}
#| eval: true

ggplot(base_avis, aes(x = theme, fill = saisine)) +
  geom_bar() +
  scale_fill_prism(palette = "winter_bright", labels = c("autosaisie","saisie")) +  
  labs(title = "Nombre d'avis par thème",
       x = "Thème",
       y = "Nombre d'avis")+
  coord_flip()+
  theme_ready(default_theme = theme_pubclean(flip = TRUE))
  
if(save_figures)
  ggsave("../output/descriptive_figures/repartition_saisie_president.png")
```

```{r}
#| eval: false
#| fig-cap-location: bottom
#| fig-cap: "Nombre d'avis par président"
#| fig-env: "figure*"
#| #| eval: true
#| fig-width: 20
#| fig-height: 15
#| label: nb_avis_president

ggplot(base_avis, aes(x = president, fill = theme)) +
  geom_bar() +
  scale_fill_prism(palette = "colors") +  
  labs(title = "Nombre d'avis par président du CCNE",
       x = "Président",
       y = "Nombre d'avis")+
  guides(fill = guide_legend(ncol = 2))+  # Mettre la légende sur deux colonnes
  theme_ready()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        legend.key.size = unit(0.8, "cm"),
        legend.position = "right")
  
if(save_figures)
  ggsave("../output/descriptive_figures/taille_avis_temps.png")
```

## Selon le président

```{r}
#| eval: true

ggplot(base_avis, aes(x = president, fill = saisine)) +
  geom_bar() +
  theme_ready() +  
  labs(title = "Nombre d'avis par président du CCNE",
       x = "Président",
       y = "Nombre d'avis")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))+
  scale_fill_prism(palette = "winter_bright", labels = c("autosaisie","saisie")) + 

  if(save_figures)
  ggsave("../output/descriptive_figures/repartition_saisie_president.png")
```

# Taille des avis par président

## Nombre de pages

```{r}
ggplot(base_avis, aes(x = president,y=nb_pages, fill = president)) +
  geom_boxplot() +
  scale_fill_prism(palette = "winter_bright") +  
  labs(title = "Nombre de pages moyen par président du CCNE",
       x = "Président",
       y = "Nombre de pages")+ 
  theme_ready()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        legend.position = "none")
if(save_figures)
  ggsave("../output/descriptive_figures/taille_avis_president.png")
```

## Nombre de phrases

```{r}
# Perform data manipulation and statistical testing
test_result.t <- base_sentences |>
  group_by(president,num,number_sentences)|>
  summarise()|>
  ungroup() |>
  t_test(number_sentences ~ president, p.adjust.method = "BH") |> 
  add_significance(
    cutpoints = cutpoints,
    symbols = symbols
  )|>
  add_xy_position()

base_sentences|>
  group_by(president,num,number_sentences)|>
  summarise()|>
   ggboxplot(x = "president", y = "number_sentences", fill = "president")+
    scale_fill_prism(palette = "winter_bright") +  
    labs(title = "Nombre moyen des phrases par avis",
         x = "Mot clé",
         y = "Nombre de phrase",
         caption = paste("t-test, BH adjusted",signif_caption_text,sep = "\n"))+
  stat_pvalue_manual(test_result.t, label = "p.adj.signif", hide.ns = TRUE)+
  stat_anova_test(label.y = 1900)+
  theme_ready()

```

# Autres informations sur les avis par président

## Nombre de graphiques par président

```{r}
#| eval: false
base_avis|>
  group_by(president)|>
  summarise(n = sum(`tableaux et graphiques`))|>
  ggbarplot(x = "president", y ="n",fill = "president")+
  scale_fill_prism(palette = "winter_bright") +  
    labs(title = "Nombre de graphiques par président",
         x = "Mot clé",
         y = "Nombre de graphiques")+
  coord_flip()+
  theme_ready(default_theme = theme_pubclean(flip = TRUE))
```

```{r}
#| eval: true
base_avis|>
  group_by(president)|>
  mutate(`tableaux et graphiques` = (`tableaux et graphiques`>=1))|>
  summarise(n = sum(`tableaux et graphiques`))|>
  ggbarplot(x = "president", y ="n",fill = "president")+
  scale_fill_prism(palette = "winter_bright") +  
    labs(title = "Nombre d'avis avec au moins un graphique par président",
         x = "Mot clé",
         y = "Nombre d'avis")+
  coord_flip()+
  theme_ready(default_theme = theme_pubclean(flip = TRUE))
```

## Nombre de dissensus par président
```{r}
metadata_avis <- open_metadata()
```

```{r}
metadata_avis|>
  left_join(base_avis%>%
              select(num,president),
            by = "num")%>%
  group_by(president)|>
  summarise(n = sum(`divergence`))|>
  ggbarplot(x = "president", y ="n",fill = "president")+
  scale_fill_prism(palette = "winter_bright") +  
    labs(title = "Nombre d'avis avec une divergence par président",
         x = "Mot clé",
         y = "Nombre d'avis")+
  coord_flip()+
  theme_ready(default_theme = theme_pubclean(flip = TRUE))
```

# Phrases d'intérêt

```{r}
base_sentences <- base_sentences |>
  rowwise() |>
  mutate(
    personne = has_words(sentence, c("personne", "personnes")),
    humain = has_words(sentence, c("humain", "humaine", "humains", "humaines")),
    individu = has_words(sentence, c("individu", "individus")),
    nature = has_words(sentence, c("nature", "natures")),
    environnement = has_words(sentence, c("environnement", "environnements")),
    vivant = has_words(sentence, c("vivant", "vivants")),
    écosystème = has_words(sentence,c("écosystème","écosystèmes")),
    humanité = has_words(sentence, c("humanité","humanités")),
    dignité = has_words(sentence, c("dignité","dignités")),
    dignité_humaine = has_words(sentence,c("dignité humaine","dignités humaines"))
  )


```

## Nombre total de phrases d'intérêt

```{r}
nb_total_sentence <- data.frame(mot_cle = c("personne","humain","individu"),
                                total = c(sum(base_sentences$personne),sum(base_sentences$humain),sum(base_sentences$individu)))

base_sentences|>
  pivot_longer(cols = c("personne","humain","individu"), names_to = "mot_cle",values_to = "presence")|>
  mutate(mot_cle = factor(mot_cle, levels = c("personne","humain","individu")))|>
  group_by(president,mot_cle)|>
  summarise(phrases = sum(presence))|>
  ggbarplot(x = "mot_cle",y="phrases",fill = "president",
            label = TRUE, lab.col = "white", lab.pos = "in",lab.size = 3, lab.vjust = 1)+
    scale_fill_prism(palette = "winter_bright") +  
    labs(title = "Nombre de phrase avec mots clés",
         x = "Mot clé",
         y = "Nombre de phrase")+
  theme_ready()+
  geom_text(data = nb_total_sentence, aes(x = mot_cle, y = total, label = paste("Total:",total)),
            position = position_dodge(width = 0.9), vjust = -0.5, size = 5, color = "black")
if(save_figures)
  ggsave("../output/descriptive_figures/nombre_phrase_personne_humain_individu.png")
```

```{r}
#| eval: false
base_sentences |>
  pivot_longer(cols = c("personne","humain","individu"), names_to = "mot_cle",values_to = "presence")|>
  mutate(mot_cle = factor(mot_cle, levels = c("personne","humain","individu")))|>
  group_by(president, mot_cle) |>
  summarise(phrases = 100*mean(presence)) |>
  ggbarplot(x = "president", y = "phrases", fill = "mot_cle",
            label = TRUE, lab.col = "white", lab.pos = "in",lab.size = 3, lab.vjust = 0, lab.hjust = 1.1, lab.nb.digits = 1) +
  scale_fill_prism(palette = "winter_bright") +
  labs(title = "Proportion de phrase avec mots clés par president",
       x = "Mot clé",
       y = "Proportion de phrase (%)") +
  theme_ready()+
  coord_flip()
  
if (save_figures)
  ggsave("../output/descriptive_figures/proportion_phrase_personne_humain_individu_president.png")
```

```{r}
#| eval: false

# Perform data manipulation and statistical testing
test_result.t <- base_sentences |>
  pivot_longer(cols = c("personne", "humain", "individu"), names_to = "mot_cle", values_to = "presence") |>
  mutate(mot_cle = factor(mot_cle, levels = c("personne", "humain", "individu"))) |>
  group_by(president, mot_cle, num) |>
  summarise(proportion = 100 * mean(presence)) |>
  ungroup() |>
  group_by(mot_cle) |> 
  t_test(proportion ~ president, p.adjust.method = "BH") |>
  add_significance(
    cutpoints = cutpoints,
    symbols = symbols
  )

# Plotting
base_sentences |>
  pivot_longer(cols = c("personne", "humain", "individu"), names_to = "mot_cle", values_to = "presence") |>
  mutate(mot_cle = factor(mot_cle, levels = c("personne", "humain", "individu"))) |>
  group_by(president, mot_cle, num) |>
  summarise(proportion = 100 * mean(presence)) |>
  ggboxplot(x = "president", y = "proportion", fill = "mot_cle", facet.by = "mot_cle") +
  scale_fill_prism(palette = "winter_bright") +  labs(
    title = "Proportion de phrase avec mots clés par président",
    caption = paste("t-test, BH adjusted",signif_caption_text,sep = "\n"),
    x = "Mot clé",
    y = "Proportion de phrase (%)",
    fill = "Phrase avec"
  ) +
  theme_ready()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
  stat_pvalue_manual(test_result.t, label = "p.adj.signif", hide.ns = TRUE, y.position = 40, step.group.by = "mot_cle", step.increase = 0.08)
if(save_figures)
  ggsave("../output/descriptive_figures/proportion_personne_humain_individu_avis.png")
```